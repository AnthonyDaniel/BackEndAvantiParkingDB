USE master
GO
CREATE DATABASE AvantiParking ON PRIMARY
(NAME = 'AvantiParking_data',
FILENAME = 'C:\AvantiParking\AvantiParking_data.mdf', 
SIZE = 10MB,
MAXSIZE = 100MB,
FILEGROWTH = 25MB)
LOG ON
(NAME = 'AvantiParking_log',
FILENAME = 'C:\AvantiParking\AvantiParking_log.ldf', 
SIZE = 20MB,
MAXSIZE = 100MB,
FILEGROWTH = 15%)
COLLATE Modern_Spanish_CI_AI
go
use AvantiParking
go
CREATE USER regUser WITH PASSWORD = 'XASDASF123SAa'
CREATE USER adminUser WITH PASSWORD = 'QEGI23dsaC'

ALTER ROLE db_owner ADD MEMBER adminUser;
ALTER ROLE db_datawriter ADD MEMBER regUser;
ALTER ROLE db_datareader ADD MEMBER regUser;
ALTER ROLE db_ddladmin ADD MEMBER regUser;


BACKUP DATABASE AvantiParking
TO DISK = 'C:\Respaldo\respaldo.bak'
   WITH FORMAT,
      MEDIANAME = 'SQLServerBackups',
      NAME = 'Full Backup of AvantiParking';
GO

 BACKUP DATABASE AvantiParking  TO DISK = 'C:\Respaldo\_respaldo.bak'  WITH FORMAT, MEDIANAME = 'SQLServerBackups',  NAME = 'Full Backup of AvantiParking'; 

use AvantiParking

go

CREATE TABLE usuario(
	username nvarchar(50) NOT NULL,
	id int NOT NULL UNIQUE,
	nombre nvarchar(50) NOT NULL,
	direccion nvarchar(50) NOT NULL,
	telefono int NOT NULL,
	tipo tinyint,
	contrasena nvarchar(50) NOT NULL,
	CONSTRAINT PK_usuario PRIMARY KEY (username)
)

GO

CREATE TABLE vehiculo(
	placa varchar(50) NOT NULL,
	marca varchar(50) NOT NULL,
	modelo varchar(50) NOT NULL,
	usuario nvarchar(50) NOT NULL,
	CONSTRAINT Pk_vehiculo PRIMARY KEY (placa),
	CONSTRAINT FK_vehiculo_usuario FOREIGN KEY (usuario) REFERENCES Usuario(username)
) 

GO

CREATE TABLE sede(
	id_sede int identity NOT NULL,
	nombre nvarchar(50) NOT NULL,
	direccion nvarchar(50) NOT NULL
	CONSTRAINT PK_sede PRIMARY KEY (id_sede)
) 
GO
CREATE TABLE parqueo(
	id_parqueo int identity NOT NULL,
	nombre nvarchar(50) NOT NULL,
	zona nvarchar(50) NOT NULL,
	cantidad int NOT NULL,
	comienzo int NOT NULL,
	sede int NOT NULL
	CONSTRAINT PK_parqueo PRIMARY KEY (id_parqueo),
	CONSTRAINT FK_parqueo_sede FOREIGN KEY (sede) REFERENCES Sede(id_sede)
) 

GO

CREATE TABLE espacio(
	id_espacio int identity NOT NULL,
	nombre int NOT NULL,
	estado tinyint NOT NULL,
	tipo_espacio nvarchar(50) NOT NULL,
	parqueo int NOT NULL,
	CONSTRAINT PK_espacio PRIMARY KEY (id_espacio),
	CONSTRAINT FK_espacio_parqueo FOREIGN KEY (parqueo) REFERENCES Parqueo(id_parqueo)
) 

GO

CREATE TABLE reserva(
	id_reserva int identity NOT NULL,
	espacio int NOT NULL,
	fecha_reserva date NOT NULL,
	hora_final time(7) NOT NULL,
	hora_inicio time(7) NOT NULL,
	usuario nvarchar(50) NOT NULL,
	vehiculo varchar(50) NOT NULL,
	CONSTRAINT PK_reserva PRIMARY KEY (id_reserva),
	CONSTRAINT FK_reserva_usuario FOREIGN KEY (usuario) REFERENCES Usuario(username),
	CONSTRAINT FK_reserva_vehiculo FOREIGN KEY (vehiculo) REFERENCES Vehiculo(placa),
	CONSTRAINT FK_reserva_espacio FOREIGN KEY (espacio) REFERENCES Espacio(id_espacio)
)

GO

create procedure pa_agregar_sede
	@nombre nvarchar(50),
	@direccion nvarchar(50)
as
if (@nombre is null) or (@direccion is null)
	return 0;
else	
begin	
	insert into sede (nombre,direccion)
	values (@nombre,@direccion);	
	return 1
end;

go

create procedure pa_actualizar_sede
	@id_sede int,
	@nombre nvarchar(50),
	@direccion nvarchar(50)
as
if (@id_sede is null) or (@nombre is null) or (@direccion is null)
	return 0	
else	
begin	
	update sede set nombre=@nombre,direccion=@direccion
	where id_sede = @id_sede;
	return 1
end;

 go

create procedure pa_eliminar_sede
	@id_sede int
as
declare @resultado int;
select @resultado = count(*) from sede where id_sede = @id_sede;
if (@id_sede is null) or @resultado <> 1
	return 0;
else	
begin	
	delete from sede where id_sede = @id_sede
	return 1
end;

 go

create view view_sede
 as 
 select id_sede, nombre, direccion
 from sede;

 go

create procedure pa_agregar_parqueo
	@nombre nvarchar(50),
	@zona nvarchar(50),
	@cantidad int,
	@comienzo int,
	@sede int
as
declare @resultado int;
select @resultado = count(*) from sede where id_sede = @sede;

if (@nombre is null) or (@zona is null) or (@cantidad is null) or (@sede is null) or (@resultado = 0) or (@cantidad = 0) or @comienzo is null
	return 0;
else	
begin	
	insert into parqueo (nombre,zona,cantidad,comienzo,sede)
	values (@nombre,@zona,@cantidad,@comienzo,@sede);	
	return 1
end;

 go

create procedure pa_actualizar_parqueo
	@id int,
	@nombre nvarchar(50),
	@zona nvarchar(50),
	@sede int
as
declare @resultado int;
select @resultado = count(*) from sede where id_sede = @sede;

if (@id is null) or (@nombre is null) or (@zona is null) or (@sede is null) or (@resultado = 0)
	return 0;
else	
begin	
	update parqueo set nombre=@nombre,zona=@zona, sede = @sede
	where id_parqueo = @id;
	return 1
end

 go

create procedure pa_eliminar_parqueo
	@id int
as
declare @resultado int;
select @resultado = count(*) from parqueo where id_parqueo = @id;
if (@id is null) or @resultado <> 1
	return 0;
else	
begin	
	delete from parqueo where id_parqueo = @id
	return 1
end

 go

create view view_parqueo
 as 
 select id_parqueo, parqueo.nombre, zona, cantidad, comienzo, sede.id_sede, sede.nombre as sede
 from parqueo inner join sede on sede.id_sede = parqueo.sede;

 go

create procedure pa_agregar_espacio
	@nombre int,
	@parqueo int
as
if (@nombre is null) or @parqueo is null
	return 0;
else	
begin	
	insert into espacio(nombre,tipo_espacio,estado,parqueo)
	values (@nombre,'Regular',0,@parqueo);	
	return 1
end;

 go

create procedure pa_actualizar_espacio
	@id int,
	@nombre int,
	@estado tinyint,
	@tipo_espacio nvarchar(50)
as
if (@id is null) or (@nombre is null) or (@estado is null) or (@tipo_espacio is null)
	return 0;
else	
begin	
	update espacio set nombre=@nombre,estado=@estado, tipo_espacio = @tipo_espacio
	where id_espacio = @id;
	return 1
end

 go

create procedure pa_eliminar_espacio
	@id int
as
declare @resultado int;
select @resultado = count(*) from espacio where id_espacio = @id;
if (@id is null) or @resultado <> 1
	return 0;
else	
begin	
	delete from espacio where id_espacio = @id
	return 1
end;

 go

create view view_espacio
 as 
 select espacio.id_espacio, espacio.nombre, espacio.tipo_espacio, espacio.estado, parqueo.id_parqueo, parqueo.nombre as parqueo
 from espacio inner join parqueo on parqueo.id_parqueo = espacio.parqueo;

 go

 create view view_espacio_disponibles
 as 
 select espacio.id_espacio, espacio.nombre, espacio.tipo_espacio, espacio.estado, parqueo.id_parqueo, parqueo.nombre as parqueo
 from espacio inner join parqueo on parqueo.id_parqueo = espacio.parqueo where espacio.estado <> 1;

 go

 create view view_espacio_no_disponibles
 as 
 select espacio.id_espacio, espacio.nombre, espacio.tipo_espacio, espacio.estado, parqueo.id_parqueo, parqueo.nombre as parqueo
 from espacio inner join parqueo on parqueo.id_parqueo = espacio.parqueo where espacio.estado = 1;

 go

 create view view_espacio_tipo_regular
 as 
 select espacio.id_espacio, espacio.nombre, espacio.tipo_espacio, espacio.estado, parqueo.id_parqueo, parqueo.nombre as parqueo
 from espacio inner join parqueo on parqueo.id_parqueo = espacio.parqueo where espacio.tipo_espacio = 'regular';

 go

 create view view_espacio_tipo_especial
 as 
 select espacio.id_espacio, espacio.nombre, espacio.tipo_espacio, espacio.estado, parqueo.id_parqueo, parqueo.nombre as parqueo
 from espacio inner join parqueo on parqueo.id_parqueo = espacio.parqueo where espacio.tipo_espacio = 'especial';

 go

create procedure pa_agregar_usuario
	@username nvarchar(50),
	@id int,
	@nombre nvarchar(50),
	@direccion nvarchar(50),
	@telefono int,
	@contrasena nvarchar(50)
as
if (@nombre is null) or (@id is null) or (@nombre is null) or (@direccion is null) or (@telefono is null) or (@contrasena is null)
	return 0;
else	
begin	
	insert into usuario(username,id,nombre,direccion,telefono,contrasena)
	values (@username,@id,@nombre,@direccion,@telefono,@contrasena);	
	return 1
end;

go

create procedure pa_actualizar_usuario
	@id int,
	@nombre nvarchar(50),
	@direccion nvarchar(50),
	@telefono int,
	@contrasena nvarchar(50)
as
if (@nombre is null) or (@id is null) or (@nombre is null) or (@direccion is null) or (@telefono is null) or (@contrasena is null)
	return 0;
else	
begin	
	update usuario set nombre=@nombre,direccion=@direccion, telefono = @telefono,contrasena = @contrasena
	where id = @id;
	return 1
end;

 go

create procedure pa_actualizar_usuario_tipo
	@id int,
	@tipo tinyint
as
if (@id is null) or (@tipo is null)
	return 0;
else	
begin	
	update usuario set tipo = @tipo
	where id = @id;
	return 1
end;

 go

create procedure pa_eliminar_usuario
	@id int
as
declare @resultado int;
select @resultado = count(*) from usuario where id = @id;
if (@id is null) or @resultado <> 1
	return 0;
else	
begin	
	delete from usuario where id = @id
	return 1
end;

 go

create view view_usuario
 as 
 select usuario.username, usuario.id, usuario.nombre, usuario.tipo, usuario.telefono,usuario.direccion,usuario.contrasena 
 from usuario;

 go

create procedure pa_agregar_vehiculo
	@placa varchar(50),
	@marca varchar(50),
	@modelo varchar(50),
	@usuario nvarchar(50)
as
if (@placa is null) or (@marca is null) or (@modelo is null) or (@usuario is null)
	return 0;
else	
begin	
	insert into vehiculo(placa,marca,modelo,usuario)
	values (@placa,@marca,@modelo,@usuario);	
	return 1
end;

 go

create procedure pa_actualizar_vehiculo
	@placa varchar(50),
	@marca varchar(50),
	@modelo varchar(50)
as
if (@placa is null) or (@marca is null) or (@modelo is null)
	return 0;
else	
begin	
	update vehiculo set marca=@marca,modelo=@modelo
	where placa = @placa;
	return 1
end;

 go

create procedure pa_eliminar_vehiculo
	@id nvarchar(50)
as
declare @resultado int;
select @resultado = count(*) from vehiculo where placa = @id;
if (@id is null) or @resultado <> 1
	return 0;
else	
begin	
	delete from vehiculo where placa = @id
	return 1
end

 go

create view view_vehiculo
 as 
 select vehiculo.placa, vehiculo.marca, vehiculo.modelo, usuario.username
 from vehiculo inner join usuario on usuario.username = vehiculo.usuario;

 go

use AvantiParking
go
create procedure pa_agregar_reserva
	@espacio int,
	@fecha_reserva date,
	@hora_inicio time(7),
	@hora_final time(7),
	@usuario nvarchar(50),
	@vehiculo nvarchar(50)

as

if  (@espacio is null) or (@fecha_reserva is null)
or (@hora_inicio is null) or (@hora_final is null) or (@usuario is null) or (@vehiculo is null)
	return 0;
else	
begin	
	insert into reserva (espacio,fecha_reserva,hora_inicio,hora_final,usuario,vehiculo)
	values (@espacio,@fecha_reserva,@hora_inicio,@hora_final,@usuario,@vehiculo);	
	return 1
end;

 go

create procedure pa_eliminar_reserva
	@id_reserva int
as
declare @resultado int;
select @resultado = count(*) from reserva where id_reserva= @id_reserva;
if (@id_reserva is null) or @resultado <> 1
	return 0;
else	
begin	
	delete from reserva where id_reserva = @id_reserva
	return 1
end;

go

create view vista_reserva
 as 
 select reserva.id_reserva, reserva.espacio, reserva.fecha_reserva, reserva.hora_inicio, 
 reserva.hora_final, usuario.id, vehiculo.placa
 from reserva inner join usuario on usuario.username = reserva.usuario inner join vehiculo on vehiculo.placa = reserva.vehiculo;

 go

create trigger dis_insertar_espacio
	on espacio
	for insert
as
	declare @quantity int
	declare @idParqueo int
	select @idParqueo = parqueo from inserted
	select @quantity = cantidad from parqueo where id_parqueo = @idParqueo
	set @quantity = @quantity + 1
	update parqueo set cantidad = @quantity where id_parqueo =@idParqueo;
	
go
create trigger dis_crear_espacios_parqueo
	on parqueo
	for insert
as
	declare @quantity int
	declare @contador int 
	declare @idParqueo int
	declare @beginFrom int
	select @idParqueo = id_parqueo, @quantity = cantidad, @beginFrom = comienzo from inserted
	set @contador = @beginFrom
	while @contador < (@quantity + @beginFrom)
	begin
		insert into espacio(nombre,estado,tipo_espacio,parqueo) values (@contador,0,'regular',@idParqueo)
		set @contador = @contador + 1
	end;

GO

create trigger dis_eliminar_espacio
	on espacio
	for delete
as
	declare @quantity int
	declare @contador int 
	declare @idParqueo int
	select @contador = count(*) from deleted
	select @idParqueo = parqueo from deleted
	select @quantity = cantidad from parqueo where id_parqueo = @idParqueo
	if @contador = 1
	begin
		set @quantity = @quantity - 1
		print(@quantity)
		update parqueo set cantidad = @quantity where id_parqueo =@idParqueo;
	end
	else
	begin
		set @quantity = @quantity - @contador
		print(@quantity)
		update parqueo set cantidad = @quantity where id_parqueo =@idParqueo;
	end;

go

create function vistaEspacioPorSedes(
@Parqueo int ,
@Tipo nvarchar(55) ,
@Disponibilidad int 
)
returns table
as
return
 select espacio.*
 from espacio
 where espacio.tipo_espacio = @Tipo and espacio.parqueo = @Parqueo and espacio.estado = @Disponibilidad; 

go

create trigger disp_insertar_reserva_fecha_anterior
	on reserva
	for insert
as
	declare @actual datetime
	declare @insertada datetime
	select @insertada = fecha_reserva from inserted
	select @actual = CONVERT(date, GETDATE(), 105)
	if(@insertada < @actual)	
	begin
		raiserror('**ERROR** No se pueden realizar reservas al anteriores al dia de hoy',16,1)
		rollback transaction
end

go

 create trigger disp_insertar_reserva_choque_reserva
	on reserva
	for insert
as
	declare @cont int
	declare @inicio1 time
	declare @fin1 time
	declare @inicioInsertada time
	declare @idReservaInsertada int
	declare @idReserva int
	declare @espacio int
	declare @message varchar(200)
	select @inicioInsertada = hora_inicio from inserted
	select @idReservaInsertada = id_Reserva from inserted
	select @espacio = espacio from inserted
	select @cont = count(*) from reserva
	if( @cont> 1)
	begin
		select @inicio1 = hora_inicio, @fin1 = hora_final, @idReserva = id_reserva from reserva where fecha_reserva = (select fecha_reserva from inserted) and id_reserva != @idReservaInsertada and espacio =@espacio
		if(@inicioInsertada = @inicio1) or (@inicioInsertada < @fin1)
		begin
			set @message = concat('***ERROR*** La nueva reserva id: ',@idReservaInsertada, ' choca con la reserva id: ',@idReserva)
			raiserror(@message,16,1)
			rollback transaction
		end
	end;

	go

create view view_admin
 as 
 SELECT 
    pr.name ,
    pr.type_desc ,
    pr.create_date ,
    mod.definition
FROM sys.all_objects pr
INNER JOIN sys.sql_modules mod ON pr.object_id = mod.object_id
WHERE pr.Is_MS_Shipped = 0;

go

create procedure pa_admin

as
	BACKUP DATABASE AvantiParking
    TO DISK = 'C:\Respaldo\_respaldo.bak'
    WITH FORMAT,
    MEDIANAME = 'SQLServerBackups',
    NAME = 'Full Backup of AvantiParking';



use AvantiParking
go
create table auditorias(
	id int identity(1,1) not null,
	tabla varchar(15) not null,
	usuario varchar(15) not null,
	fecha datetime not null,
	accion varchar(15) not null,
	detalle varchar(400) not null
	primary key(id)
)
go

if object_id('disp_auditar_eliminar') is not null 
	drop trigger disp_auditar_eliminar;
go
create trigger disp_auditar_eliminar
	on reserva
	for delete
as set nocount on

	declare @usuario varchar(15)
	declare @fecha datetime
	declare @detalle varchar(400)
	declare @cant int   

	declare @idReserva int
	declare @espacio int
	declare @fecha_reserva date
	declare @hora_final time
	declare @hora_inicio time
	declare @usuarioT varchar(50)
	declare @vehiculo varchar(50)

	set @fecha = GETDATE()
	set @usuario = SYSTEM_USER
	select @cant= COUNT(id_reserva) from deleted
	
	if (@cant > 1)
	begin
		raiserror('**ERROR** No se puede eliminar mas de un registro a la vez',16,1)
		rollback transaction
	end
	else
	begin
		select @idReserva = id_reserva, @espacio = espacio, @fecha_reserva = fecha_reserva, @hora_final = hora_final,
		@hora_inicio = hora_inicio, @usuarioT = usuario, @vehiculo = vehiculo from deleted
		set @detalle = CONCAT('id_reserva: ',@idReserva,' espacio:',@espacio,' fecha_reserva: ',@fecha_reserva,
		' hora_final: ',@hora_final,' hora_inicio: ',@hora_inicio,' usuario: ', @usuario, 
		' vehiculo: ',@vehiculo )
		insert into auditorias values('reserva',@usuario,@fecha,'delete',@detalle)
	end;
go

if object_id('disp_auditar_editar') is not null 
	drop trigger disp_auditar_editar;
go
create trigger disp_auditar_editar
	on reserva
	for update
as set nocount on

	declare @usuario varchar(15)
	declare @fecha datetime
	declare @detalle varchar(400)
	declare @cant int   

	declare @idReserva int
	declare @espacio int
	declare @fecha_reserva date
	declare @hora_final time
	declare @hora_inicio time
	declare @usuarioT varchar(50)
	declare @vehiculo varchar(50)

	set @fecha = GETDATE()
	set @usuario = SYSTEM_USER
	select @cant= COUNT(id_reserva) from deleted
	
	if (@cant > 1)
	begin
		raiserror('**ERROR** No se puede editar mas de un registro a la vez',16,1)
		rollback transaction
	end
	else
	begin
		select @idReserva = id_reserva, @espacio = espacio, @fecha_reserva = fecha_reserva, @hora_final = hora_final,
		@hora_inicio = hora_inicio, @usuarioT = usuario, @vehiculo = vehiculo from deleted
		set @detalle = CONCAT('OLD [','id_reserva: ',@idReserva,' espacio:',@espacio,' fecha_reserva: ',@fecha_reserva,
		' hora_final: ',@hora_final,' hora_inicio: ',@hora_inicio,' usuario: ', @usuario, 
		' vehiculo: ',@vehiculo )
		select @idReserva = id_reserva, @espacio = espacio, @fecha_reserva = fecha_reserva, @hora_final = hora_final,
		@hora_inicio = hora_inicio, @usuarioT = usuario, @vehiculo = vehiculo from inserted
		set @detalle = CONCAT(@detalle,'] NEW [','id_reserva: ',@idReserva,' espacio:',@espacio,' fecha_reserva: ',@fecha_reserva,
		' hora_final: ',@hora_final,' hora_inicio: ',@hora_inicio,' usuario: ', @usuario, 
		' vehiculo: ',@vehiculo,']' )
		insert into auditorias values('reserva',@usuario,@fecha,'update',@detalle)
	end;
go

select * from reserva
update reserva set espacio = 20 where id_reserva = 66
select * from auditorias
delete from auditorias 
delete from reserva where id_reserva = 66
insert into reserva values(18,'11-5-2019','8:00','9:00','maucbs@gmail.com','hsr-896')
insert into reserva values(18,'11-6-2019','8:00','9:00','maucbs@gmail.com','hsr-896')
insert into reserva values(18,'11-7-2019','8:00','9:00','maucbs@gmail.com','hsr-896')
insert into reserva values(18,'11-8-2019','8:00','9:00','maucbs@gmail.com','hsr-896')
